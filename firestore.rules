rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isContentOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidBoycott(data) {
      return data.size() <= 30 && // Limit on fields
             data.title is string && 
             data.title.size() <= 200 && // Title length limit
             data.description is string && 
             data.description.size() <= 5000 && // Description length limit
             (!('imageUrl' in data) || data.imageUrl is string) &&
             (data.createdBy is string || !('createdBy' in data)) &&
             (data.supportCount is number || !('supportCount' in data)) &&
             (data.oppositionCount is number || !('oppositionCount' in data));
    }
    
    function isValidProtest(data) {
      return data.size() <= 30 && // Limit on fields
             data.title is string && 
             data.title.size() <= 200 && // Title length limit
             data.description is string && 
             data.description.size() <= 5000 && // Description length limit
             (!('imageUrl' in data) || data.imageUrl is string) &&
             (data.creatorUserId is string || !('creatorUserId' in data)) &&
             (data.supportCount is number || !('supportCount' in data)) &&
             (data.oppositionCount is number || !('oppositionCount' in data));
    }
    
    function isValidUser(data) {
      return data.size() <= 20 && // Limit on fields
             data.email is string &&
             data.email.size() <= 200 &&
             (!('displayName' in data) || data.displayName is string) && 
             (!('displayName' in data) || data.displayName.size() <= 100);
    }
    
    // Allow public read access for protests and boycotts
    match /{document=**} {
      allow read: if true;
    }
    
    // Protests collection rules
    match /protests/{protestId} {
      // Allow public read access
      allow read: if true;
      
      // Allow authenticated users to create protests
      allow create: if isAuthenticated() && 
                     isValidProtest(request.resource.data) &&
                     request.resource.data.creatorUserId == request.auth.uid;
      
      // Allow update for:
      // 1. Admin users can update anything
      // 2. Regular users can only update their own protests
      // 3. Users can update vote counters
      allow update: if isAuthenticated() && 
                     isValidProtest(request.resource.data) &&
                     (
                       isAdmin() ||
                       (isContentOwner(resource.data.creatorUserId) &&
                        request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['title', 'description', 'location', 'category'])) ||
                       (request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['supportCount', 'oppositionCount']))
                     );
                     
      // Allow delete only for admin or owner
      allow delete: if isAuthenticated() && 
                     (isAdmin() || isContentOwner(resource.data.creatorUserId));
    }
    
    // Boycotts collection rules
    match /boycotts/{boycottId} {
      // Allow public read access
      allow read: if true;
      
      // Allow authenticated users to create boycotts
      allow create: if isAuthenticated() && 
                     isValidBoycott(request.resource.data) &&
                     request.resource.data.createdBy == request.auth.uid;
      
      // Allow update for:
      // 1. Admin users can update anything
      // 2. Regular users can only update their own boycotts
      // 3. Users can update vote counters
      allow update: if isAuthenticated() && 
                     isValidBoycott(request.resource.data) &&
                     (
                       isAdmin() ||
                       (isContentOwner(resource.data.createdBy) &&
                        request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['title', 'description', 'location', 'mainCategory', 'subCategory'])) ||
                       (request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['supportCount', 'oppositionCount', 'opposeCount']))
                     );
                     
      // Allow delete only for admin or owner
      allow delete: if isAuthenticated() && 
                     (isAdmin() || isContentOwner(resource.data.createdBy));
    }
    
    // Votes collection rules
    match /votes/{voteId} {
      // Allow public read access
      allow read: if true;
      
      // Allow create if user is authenticated and the vote belongs to them
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid &&
                     (request.resource.data.voteType in ['support', 'opposition']);
      
      // Allow update if user is authenticated and the vote belongs to them
      allow update: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid &&
                     request.resource.data.userId == request.auth.uid &&
                     (request.resource.data.voteType in ['support', 'opposition']);
      
      // Allow delete if user is authenticated and the vote belongs to them
      allow delete: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
    }
    
    // BoycottVotes collection rules
    match /boycottVotes/{voteId} {
      // Allow public read access
      allow read: if true;
      
      // Allow create if user is authenticated and the vote belongs to them
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid &&
                     (request.resource.data.vote in ['support', 'opposition', 'oppose']);
      
      // Allow update if user is authenticated and the vote belongs to them
      allow update: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid &&
                     request.resource.data.userId == request.auth.uid &&
                     (request.resource.data.vote in ['support', 'opposition', 'oppose']);
      
      // Allow delete if user is authenticated and the vote belongs to them
      allow delete: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if true;
      allow create, update: if isContentOwner(userId) && isValidUser(request.resource.data);
      allow delete: if isAdmin();
      
      // Prevent changing role to admin (only Firebase console can set admin)
      allow update: if isContentOwner(userId) && 
                     (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) || 
                      (resource.data.role == request.resource.data.role));
    }
    
    // Reports collection rules
    match /reports/{reportId} {
      allow read: if isAdmin() || 
                   (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.size() <= 15;
      allow update, delete: if isAdmin();
    }
    
    // Categories collection rules
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Comments collection rules
    match /comments/{commentId} {
      allow read: if true;
      
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.content is string &&
                     request.resource.data.content.size() <= 1000 &&
                     request.resource.data.size() <= 15;
                     
      allow update: if isAuthenticated() &&
                     (
                       (resource.data.userId == request.auth.uid &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content', 'updatedAt']) &&
                        request.resource.data.content is string &&
                        request.resource.data.content.size() <= 1000) ||
                       isAdmin()
                     );
                     
      allow delete: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
    }
  }
} 